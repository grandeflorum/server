<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.grandeflorum.statistic.dao.StatisticMapper">

<sql id="dateFilter">
    <choose>
        <when test="type==1">
            to_char(t.rentdate,'yyyy-MM')
        </when>
        <when test="type==2">
            to_char(t.rentdate,'q')
        </when>
        <otherwise>
            to_char(t.rentdate,'yyyy')
        </otherwise>
    </choose>
</sql>

<sql id="dateWhere">
    <choose>
        <when test="type==1">
            and to_char(t.rentdate, 'yyyy') = #{startDate}
        </when>
        <when test="type==2">
            and to_char(t.rentdate, 'yyyy') = #{startDate}
        </when>
        <otherwise>
           and  to_char(t.rentdate, 'yyyy') <![CDATA[  >=  ]]> #{startDate}
           and to_char(t.rentdate, 'yyyy')  <![CDATA[  <=  ]]> #{endDate}
        </otherwise>
    </choose>
</sql>

<select id="getHouseRentalStatisticDate" parameterType="map" resultType="com.grandeflorum.statistic.domain.StatisticValue">

    select <include refid="dateFilter"></include> as dateValue,avg(t.RENTAL) as zj,count(t.id) ts from house_rental t
        where t.rentdate is not null
        <include refid="dateWhere"></include>
        group by <include refid="dateFilter"></include>

</select>


<select id="getHouseRentalStatisticRegion" parameterType="map" resultType="com.grandeflorum.statistic.domain.StatisticValue">

  select sr.name as regionName,nvl(avg(t.RENTAL),0) as zj,count(t.id) ts from house_rental t
    left join sys_region sr on t.regioncode = sr.code
    where sr.name is not null
    <include refid="dateWhere"></include>
    group by sr.name

</select>


    <select id="getOverallSalesTrend" parameterType="map" resultType="com.grandeflorum.statistic.domain.StatisticValue">
        select t.yf dateValue,count(t.houseid)ts
        from (select hnt.houseid, to_char(hnt.basj,'mm')yf
              from house_new_trade hnt
              where hnt.currentstatus = 5 and nvl(hnt.iscancel,0) not in (1,2)
                and hnt.houseid is not null
                and to_char(hnt.basj, 'yyyy') = #{year}
              union all
              select hst.houseid, to_char(hst.basj,'mm') yf
              from house_stock_trade hst
              where hst.currentstatus = 5 and nvl(hst.iscancel,0) not in (1,2)
                and hst.houseid is not null
                and to_char(hst.basj, 'yyyy') = #{year}) t
        group by t.yf order by to_number(t.yf)
    </select>

    <sql id="BasjFilter">
        <if test="kssj!=null and kssj!=''">
            and <![CDATA[ to_char(basj,'yyyy-mm-dd') >= #{kssj}  ]]>
        </if>
          <if test="jssj!=null and jssj!=''">
              and <![CDATA[ to_char(basj,'yyyy-mm-dd') <= #{jssj} ]]>
          </if>
    </sql>
    
    <select id="getProjectSalesVolumeList" parameterType="map" resultType="com.grandeflorum.statistic.domain.SalesStatisticInfo">
        select  min(c.qymc)qymc,min(p.xmmc) xmmc,min(d.name)yt,round(avg(t.dj),2) jj,sum(nvl2(t.houseid,h.SCJZMJ,0))xsmj,count(t.houseid)xsl,sum(t.zj)zj,min(t.lx) xmlx from project p
            left join company c on p.company_id = c.id
            left join zrz z on z.xmid = p.id
            left join h on h.ZRZH = z.ZRZH
            left join dictionary d on d.code = p.xmyt and d.type='fwyt'
            left join (select hnt.houseid, hnt.zj,hnt.dj,1 as lx
            from house_new_trade hnt
            where hnt.currentstatus = 5 and nvl(hnt.iscancel,0) not in (1,2)
            and hnt.houseid is not null
            <include refid="BasjFilter"></include>
            union all
            select hst.houseid, hst.zj,hst.dj,2 as lx
            from house_stock_trade hst
            where hst.currentstatus = 5 and nvl(hst.iscancel,0) not in (1,2)
            and hst.houseid is not null
            <include refid="BasjFilter"></include>
          )t on t.houseid = h.id
          <where>
            <if test="mc!=null and mc!=''">
                (instr(c.qymc,#{mc})>0 or instr(p.xmmc,#{mc})>0)
            </if>
            <if test="yt!=null and yt!=''">
                and p.xmyt = #{yt}
            </if>
            <if test="lx!=null and lx!=''">
                  and p.xmlx = #{lx}
            </if>
          </where>
        group by p.id
        <choose>
            <when test="sort!=null and sort.size()>0">
                <foreach collection="sort" item="item" open="order by " separator=",">
                    ${item}
                </foreach>
            </when>
        </choose>
    </select>

    <select id="getSalesVolumeTotalList" parameterType="map" resultType="com.grandeflorum.statistic.domain.SalesStatisticInfo">
        SELECT * FROM (
        select * from (
        select c.qymc,
        p.xmmc,
        d.name yt,
        round(avg(hnt.dj), 2) jj,
        sum(nvl2(hnt.houseid, h.SCJZMJ, 0)) xsmj,
        count(hnt.houseid) xsl,
        sum(hnt.zj) zj,
        1 as xmlx
        from house_new_trade hnt
        left join ASSOCIATED_COMPANY ac
        on ac.modulename = 'houseTrade'
        and ac.associatedid = hnt.id
        left join company c
        on c.id = ac.companyid
        left join h h
        on h.id = hnt.houseid
        left join zrz z
        on z.ZRZH = h.ZRZH
        left join project p
        on p.id = z.XMID
        left join dictionary d
        on d.code = p.xmyt
        and d.type = 'fwyt'
        where hnt.currentstatus = 5
        and nvl(hnt.iscancel, 0) not in (1, 2)
        and hnt.houseid is not null
            <if test="mc!=null and mc!=''">
                and  (instr(qymc,#{mc})>0 or instr(xmmc,#{mc})>0)
            </if>
            <if test="yt!=null and yt!=''">
                and xmyt = #{yt}
            </if>
            <include refid="BasjFilter"></include>
        group by c.qymc, p.xmmc, d.name ) t1
        union all
        select * from (
        select c.qymc,
        p.xmmc,
        d.name yt,
        round(avg(hst.dj), 2) jj,
        sum(nvl2(hst.houseid, h.SCJZMJ, 0)) xsmj,
        count(hst.houseid) xsl,
        sum(hst.zj) zj,
        2 as xmlx
        from house_stock_trade hst
        left join ASSOCIATED_COMPANY ac
        on ac.modulename = 'stockTrade'
        and ac.associatedid = hst.id
        left join company c
        on c.id = ac.companyid
        left join h h
        on h.id = hst.houseid
        left join zrz z
        on z.ZRZH = h.ZRZH
        left join project p
        on p.id = z.XMID
        left join dictionary d
        on d.code = p.xmyt
        and d.type = 'fwyt'
        where hst.currentstatus = 5
        and nvl(hst.iscancel, 0) not in (1, 2)
        and hst.houseid is not null
            <if test="mc!=null and mc!=''">
                and  (instr(qymc,#{mc})>0 or instr(xmmc,#{mc})>0)
            </if>
            <if test="yt!=null and yt!=''">
                and p.xmyt = #{yt}
            </if>
            <include refid="BasjFilter"></include>
        group by c.qymc, p.xmmc, d.name )t2
        ) t3
        <where>

            <if test="lx!=null and lx!=''">
                and t3.xmlx = #{lx}
            </if>
        </where>
        <choose>
            <when test="sort!=null and sort.size()>0">
                <foreach collection="sort" item="item" open="order by " separator=",">
                    ${item}
                </foreach>
            </when>
        </choose>
    </select>

    <select id="getHouseTradeTotalList" parameterType="map" resultType="com.grandeflorum.statistic.domain.SalesStatisticInfo">

        select c.qymc,
        p.xmmc,
        d.name yt,
        round(avg(hnt.dj), 2) jj,
        sum(nvl2(hnt.houseid, h.SCJZMJ, 0)) xsmj,
        count(hnt.houseid) xsl,
        sum(hnt.zj) zj,
        1 as xmlx
        from house_new_trade hnt
        left join ASSOCIATED_COMPANY ac
        on ac.modulename = 'houseTrade'
        and ac.associatedid = hnt.id
        left join company c
        on c.id = ac.companyid
        left join h h
        on h.id = hnt.houseid
        left join zrz z
        on z.ZRZH = h.ZRZH
        left join project p
        on p.id = z.XMID
        left join dictionary d
        on d.code = p.xmyt
        and d.type = 'fwyt'
        where hnt.currentstatus = 5
        and nvl(hnt.iscancel, 0) not in (1, 2)
        and hnt.houseid is not null
        <if test="mc!=null and mc!=''">
            and  (instr(qymc,#{mc})>0 or instr(xmmc,#{mc})>0)
        </if>
        <if test="yt!=null and yt!=''">
            and xmyt = #{yt}
        </if>
        <include refid="BasjFilter"></include>
        group by c.qymc, p.xmmc, d.name
        <choose>
            <when test="sort!=null and sort.size()>0">
                <foreach collection="sort" item="item" open="order by " separator=",">
                    ${item}
                </foreach>
            </when>
        </choose>
    </select>

    <select id="getStockTradeTotalList" parameterType="map" resultType="com.grandeflorum.statistic.domain.SalesStatisticInfo">
        select c.qymc,
        p.xmmc,
        d.name yt,
        round(avg(hst.dj), 2) jj,
        sum(nvl2(hst.houseid, h.SCJZMJ, 0)) xsmj,
        count(hst.houseid) xsl,
        sum(hst.zj) zj,
        2 as xmlx
        from house_stock_trade hst
        left join ASSOCIATED_COMPANY ac
        on ac.modulename = 'stockTrade'
        and ac.associatedid = hst.id
        left join company c
        on c.id = ac.companyid
        left join h h
        on h.id = hst.houseid
        left join zrz z
        on z.ZRZH = h.ZRZH
        left join project p
        on p.id = z.XMID
        left join dictionary d
        on d.code = p.xmyt
        and d.type = 'fwyt'
        where hst.currentstatus = 5
        and nvl(hst.iscancel, 0) not in (1, 2)
        and hst.houseid is not null
        <if test="mc!=null and mc!=''">
            and  (instr(qymc,#{mc})>0 or instr(xmmc,#{mc})>0)
        </if>
        <if test="yt!=null and yt!=''">
            and p.xmyt = #{yt}
        </if>
        <include refid="BasjFilter"></include>
        group by c.qymc, p.xmmc, d.name
        <choose>
            <when test="sort!=null and sort.size()>0">
                <foreach collection="sort" item="item" open="order by " separator=",">
                    ${item}
                </foreach>
            </when>
        </choose>
    </select>

    <select id="getTimeTotalValueList" parameterType="map" resultType="com.grandeflorum.statistic.domain.TimeTatolValue">
        select t.lx,count(1) ts, sum(h.SCJZMJ) mj, sum(t.zj) zj
        from (select hnt.houseid, hnt.zj,1 as lx
        from house_new_trade hnt
        where hnt.currentstatus = 5
        and nvl(hnt.iscancel, 0) not in (1, 2)
        and hnt.houseid is not null
        <include refid="BasjFilter"></include>
        union all
        select hst.houseid, hst.zj,2 as lx
        from house_stock_trade hst
        where hst.currentstatus = 5
        and nvl(hst.iscancel, 0) not in (1, 2)
        and hst.houseid is not null
        <include refid="BasjFilter"></include>) t
        left join h  h
        on h.id = t.houseid
        group by t.lx
    </select>

    
    <select id="getTimeQueryStatistics" parameterType="map" resultType="com.grandeflorum.statistic.domain.StatisticValue">
        select count(1)ts,sum(h.SCJZMJ)mj,sum(t.zj)zj from (
          select hnt.houseid, hnt.zj
            from house_new_trade hnt
            where hnt.currentstatus = 5 and nvl(hnt.iscancel,0) not in (1,2)
              and hnt.houseid is not null
          <include refid="BasjFilter"></include>
            union all
            select hst.houseid, hst.zj
            from house_stock_trade hst
            where hst.currentstatus = 5 and nvl(hst.iscancel,0) not in (1,2)
              and hst.houseid is not null
          <include refid="BasjFilter"></include>)t
               left join h on h.id = t.houseid
    </select>

    <select id="getSummarySalesPurposes" parameterType="map" resultType="com.grandeflorum.statistic.domain.StatisticValue">
        select nvl(d.name,'未知')name ,count(1)ts,sum(h.SCJZMJ)mj from (
          <if test="type=='new' or type=='all'">
              select hnt.houseid, hnt.zj,hnt.dj
              from house_new_trade hnt
              where hnt.currentstatus = 5 and nvl(hnt.iscancel,0) not in (1,2)
              and hnt.houseid is not null
              <include refid="BasjFilter"></include>
          </if>
          <if test="type=='all'">
              union all
          </if>
           <if test="type=='stock' or type=='all'">
               select hst.houseid, hst.zj,hst.dj
               from house_stock_trade hst
               where hst.currentstatus = 5 and nvl(hst.iscancel,0) not in (1,2)
               and hst.houseid is not null
               <include refid="BasjFilter"></include>
           </if>
          )t
          left join h on h.id = t.houseid
          left join dictionary d on d.code = h.FWYT1 and d.type='fwyt'
        group by d.name order by ts desc
    </select>

    <select id="getTransactionSummaryInfo" parameterType="map" resultType="com.grandeflorum.statistic.domain.TransactionSummaryInfo">

        select
        nvl(sum(case when t.currentstatus = 5 then  1 else 0 end),0) as AlreadySoldCount,
        nvl(sum(case when t.currentstatus != 5 then  1 else 0 end),0) as UnsoldCount,
        nvl(sum(case when t.currentstatus = 5 then h.SCJZMJ else 0 end),0) as AlreadySoldArea,
        nvl(sum(case when t.currentstatus != 5 then h.SCJZMJ else 0 end),0) as UnsoldCountArea
        from (
        <if test="type=='new' or type=='all'">
            select hnt.houseid,hnt.currentstatus
            from house_new_trade hnt
            where hnt.houseid is not null and nvl(hnt.iscancel,0) not in (1,2)
            <include refid="BasjFilter"></include>
        </if>
        <if test="type=='all'">
            union all
        </if>
        <if test="type=='stock' or type=='all' ">
            select hst.houseid,hst.currentstatus
            from house_stock_trade hst
            where hst.houseid is not null and nvl(hst.iscancel,0) not in (1,2)
            <include refid="BasjFilter"></include>
        </if>
        )t
        left join h on h.id = t.houseid
    </select>

</mapper>